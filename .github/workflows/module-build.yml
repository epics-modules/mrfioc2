# .github/workflows/ci-scripts-build.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

# Set the 'name:' properties to values that work for you (pvxs)

name: EPICS module (build and test)

on:
  push:
    paths:
      - ".github/workflows/module-build.yml"
      - "configure/**"
      - "evgMrmApp/**"
      - "evrApp/**"
      - "evrFRIBApp/**"
      - "evrMrmApp/**"
      - "mrfApp/**"
      - "mrfCommon/**"
      - "mrmShared/**"
      - "!mrmShared/linux/**"
  pull_request:
    paths:
      - ".github/workflows/module-build.yml"
      - "configure/**"
      - "evgMrmApp/**"
      - "evrApp/**"
      - "evrFRIBApp/**"
      - "evrMrmApp/**"
      - "mrfApp/**"
      - "mrfCommon/**"
      - "mrmShared/**"
      - "!mrmShared/linux/**"
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

env:
  SETUP_PATH: .ci-local:.ci
  EPICS_TEST_IMPRECISE_TIMING: YES

jobs:
  build-base:
    name: "${{ matrix.base }}_${{ matrix.os }}_${{ matrix.cmp }}_${{ matrix.configuration }}_${{ matrix.cross }}_${{ matrix.extra }}"
    runs-on: ${{ matrix.os }}
    # Set environment variables from matrix parameters
    env:
      BASE: ${{ matrix.base }}
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      CI_CROSS_TARGETS: ${{ matrix.cross }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            cmp: gcc
            configuration: default
            base: "3.14"

          - os: ubuntu-latest
            cmp: gcc
            configuration: default
            base: "3.15"

          - os: ubuntu-latest
            cmp: gcc
            configuration: default
            base: "7.0"
            #wine: "64"

          - os: ubuntu-latest
            cmp: gcc
            configuration: static
            base: "7.0"

          - os: ubuntu-latest
            cmp: gcc
            configuration: static
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - os: ubuntu-22.04
            cmp: gcc-9
            utoolchain: "9"
            configuration: default
            base: "7.0"

          - os: ubuntu-latest
            cmp: gcc
            configuration: default
            base: "7.0"

          - os: ubuntu-latest
            cmp: clang
            configuration: default
            base: "7.0"

          - os: ubuntu-latest
            cmp: clang
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - os: ubuntu-latest
            cmp: gcc
            configuration: default
            base: "7.0"
            cross: "RTEMS-pc386-qemu@4.10"

          - os: ubuntu-latest
            cmp: gcc
            configuration: default
            base: "7.0"
            cross: "RTEMS-pc386-qemu@4.9"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: "${{ matrix.base }}_${{ matrix.os }}_${{ matrix.cmp }}_${{ matrix.configuration }}_${{ matrix.cross }}_${{ matrix.extra }}"
      - name: Cross Dependencies
        uses: actions/cache@v4
        with:
          path: /opt/rtems
          key: "${{ matrix.base }}_${{ matrix.os }}_${{ matrix.cmp }}_${{ matrix.configuration }}_${{ matrix.cross }}_${{ matrix.extra }}"
        if: matrix.cross
      - name: Automatic core dump analysis
        uses: mdavidsaver/ci-core-dumper@master
      - name: "apt-get install"
        run: |
          sudo apt-get update
          sudo apt-get -y install qemu-system-x86 g++-mingw-w64-x86-64 gdb
        if: runner.os == 'Linux'
      - name: "apt-get install ${{ matrix.cmp }}"
        run: |
          sudo apt-get update
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get -y install g++-${{ matrix.utoolchain }}
        if: matrix.utoolchain
      - name: Prepare and compile dependencies
        run: python .ci/cue.py prepare
      - name: Build main module
        run: python .ci/cue.py build
      - name: Run main module tests
        run: python .ci/cue.py test
      - name: Collect and show test results
        run: python .ci/cue.py test-results
